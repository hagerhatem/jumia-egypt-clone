// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Jumia_Clone.Models.Entities;
using Microsoft.EntityFrameworkCore;

namespace Jumia_Clone.Data;

public class ApplicationDbContext : Microsoft.EntityFrameworkCore.DbContext
{
    public ApplicationDbContext()
    {
    }

    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
         : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Admin> Admins { get; set; }
  //  public virtual DbSet<AdminProductReview>  AdminProductReviews{ get; set; }

    public virtual DbSet<Affiliate> Affiliates { get; set; }

    public virtual DbSet<AffiliateCommission> AffiliateCommissions { get; set; }

    public virtual DbSet<AffiliateSellerRelationship> AffiliateSellerRelationships { get; set; }

    public virtual DbSet<AffiliateWithdrawal> AffiliateWithdrawals { get; set; }

    public virtual DbSet<Cart> Carts { get; set; }

    public virtual DbSet<CartItem> CartItems { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<HelpfulRating> HelpfulRatings { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderItem> OrderItems { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductAttribute> ProductAttributes { get; set; }

    public virtual DbSet<ProductAttributeValue> ProductAttributeValues { get; set; }

    public virtual DbSet<ProductImage> ProductImages { get; set; }

    public virtual DbSet<ProductRecommendation> ProductRecommendations { get; set; }

    public virtual DbSet<ProductVariant> ProductVariants { get; set; }

    public virtual DbSet<ProductView> ProductViews { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<ReturnItem> ReturnItems { get; set; }

    public virtual DbSet<ReturnRequest> ReturnRequests { get; set; }

    public virtual DbSet<ReviewImage> ReviewImages { get; set; }

    public virtual DbSet<SearchHistory> SearchHistories { get; set; }

    public virtual DbSet<SearchResultClick> SearchResultClicks { get; set; }

    public virtual DbSet<Seller> Sellers { get; set; }

    public virtual DbSet<SubCategory> SubCategories { get; set; }

    public virtual DbSet<SubOrder> SubOrders { get; set; }

    public virtual DbSet<TrendingProduct> TrendingProducts { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserCoupon> UserCoupons { get; set; }

    public virtual DbSet<UserProductInteraction> UserProductInteractions { get; set; }

    public virtual DbSet<UserRecommendation> UserRecommendations { get; set; }

    public virtual DbSet<VariantAttribute> VariantAttributes { get; set; }

    public virtual DbSet<Wishlist> Wishlists { get; set; }

    public virtual DbSet<WishlistItem> WishlistItems { get; set; }

   
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK__Address__CAA247C893E50563");

            entity.ToTable("Address", tb =>
                {
                    tb.HasTrigger("before_address_insert");
                    tb.HasTrigger("before_address_update");
                });

            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AddressName)
                .HasMaxLength(50)
                .HasDefaultValue("Home")
                .HasColumnName("address_name");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("country");
            entity.Property(e => e.IsDefault)
                .HasDefaultValue(false)
                .HasColumnName("is_default");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("phone_number");
            entity.Property(e => e.PostalCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("postal_code");
            entity.Property(e => e.State)
                .HasMaxLength(100)
                .HasColumnName("state");
            entity.Property(e => e.StreetAddress)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("street_address");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Address__user_id__4D94879B");
        });

        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admin__43AA414133484A96");

            entity.ToTable("Admin");

            entity.HasIndex(e => e.UserId, "UQ__Admin__B9BE370EDE9CA237").IsUnique();

            entity.Property(e => e.AdminId).HasColumnName("admin_id");
            entity.Property(e => e.Permissions).HasColumnName("permissions");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("role");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithOne(p => p.Admin)
                .HasForeignKey<Admin>(d => d.UserId)
                .HasConstraintName("FK__Admin__user_id__48CFD27E");
        });
       

        modelBuilder.Entity<Affiliate>(entity =>
        {
            entity.HasKey(e => e.AffiliateId).HasName("PK__Affiliat__270ACAE3227CEB09");

            entity.ToTable("Affiliate");

            entity.HasIndex(e => e.AffiliateCode, "UQ__Affiliat__E4A455D6DCB4C5EC").IsUnique();

            entity.Property(e => e.AffiliateId).HasColumnName("affiliate_id");
            entity.Property(e => e.AffiliateCode)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("affiliate_code");
            entity.Property(e => e.AvailableBalance)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("available_balance");
            entity.Property(e => e.CommissionRate)
                .HasDefaultValue(5.00m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("commission_rate");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.TotalEarnings)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_earnings");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.WithdrawnAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("withdrawn_amount");

            entity.HasOne(d => d.User).WithMany(p => p.Affiliates)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__user___1F63A897");
        });

        modelBuilder.Entity<AffiliateCommission>(entity =>
        {
            entity.HasKey(e => e.CommissionId).HasName("PK__Affiliat__D19D7CC92907DAC7");

            entity.ToTable("AffiliateCommission");

            entity.Property(e => e.CommissionId).HasColumnName("commission_id");
            entity.Property(e => e.AffiliateId).HasColumnName("affiliate_id");
            entity.Property(e => e.CommissionAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("commission_amount");
            entity.Property(e => e.CommissionRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("commission_rate");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");
            entity.Property(e => e.OrderItemTotal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("order_item_total");
            entity.Property(e => e.PaidAt).HasColumnName("paid_at");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SellerId).HasColumnName("seller_id");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.SuborderId).HasColumnName("suborder_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Affiliate).WithMany(p => p.AffiliateCommissions)
                .HasForeignKey(d => d.AffiliateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__affil__2EA5EC27");

            entity.HasOne(d => d.Order).WithMany(p => p.AffiliateCommissions)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__order__2F9A1060");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.AffiliateCommissions)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__order__32767D0B");

            entity.HasOne(d => d.Product).WithMany(p => p.AffiliateCommissions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__produ__336AA144");

            entity.HasOne(d => d.Seller).WithMany(p => p.AffiliateCommissions)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__selle__318258D2");

            entity.HasOne(d => d.Suborder).WithMany(p => p.AffiliateCommissions)
                .HasForeignKey(d => d.SuborderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__subor__308E3499");
        });

        modelBuilder.Entity<AffiliateSellerRelationship>(entity =>
        {
            entity.HasKey(e => e.RelationshipId).HasName("PK__Affiliat__C0CFD55431372A92");

            entity.ToTable("AffiliateSellerRelationship");

            entity.HasIndex(e => new { e.AffiliateId, e.SellerId }, "UQ_AffiliateSeller").IsUnique();

            entity.Property(e => e.RelationshipId).HasColumnName("relationship_id");
            entity.Property(e => e.AffiliateId).HasColumnName("affiliate_id");
            entity.Property(e => e.CommissionRate)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("commission_rate");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.SellerId).HasColumnName("seller_id");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Affiliate).WithMany(p => p.AffiliateSellerRelationships)
                .HasForeignKey(d => d.AffiliateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__affil__2704CA5F");

            entity.HasOne(d => d.Seller).WithMany(p => p.AffiliateSellerRelationships)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__selle__27F8EE98");
        });

        modelBuilder.Entity<AffiliateWithdrawal>(entity =>
        {
            entity.HasKey(e => e.WithdrawalId).HasName("PK__Affiliat__BE24C34AD7E9C9F9");

            entity.ToTable("AffiliateWithdrawal");

            entity.Property(e => e.WithdrawalId).HasColumnName("withdrawal_id");
            entity.Property(e => e.AffiliateId).HasColumnName("affiliate_id");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.Notes).HasColumnName("notes");
            entity.Property(e => e.PaymentDetails)
                .IsRequired()
                .HasColumnName("payment_details");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.ProcessedAt).HasColumnName("processed_at");
            entity.Property(e => e.RequestedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("requested_at");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("status");

            entity.HasOne(d => d.Affiliate).WithMany(p => p.AffiliateWithdrawals)
                .HasForeignKey(d => d.AffiliateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Affiliate__affil__39237A9A");
        });

        modelBuilder.Entity<Cart>(entity =>
        {
            entity.HasKey(e => e.CartId).HasName("PK__Cart__2EF52A271E7DDF84");

            entity.ToTable("Cart");

            entity.Property(e => e.CartId).HasColumnName("cart_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Customer).WithMany(p => p.Carts)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Cart__customer_i__75A278F5");
        });

        modelBuilder.Entity<CartItem>(entity =>
        {
            entity.HasKey(e => e.CartItemId).HasName("PK__CartItem__5D9A6C6E50F4DA41");

            entity.ToTable("CartItem", tb => tb.HasTrigger("update_cart_timestamp"));

            entity.HasIndex(e => new { e.CartId, e.ProductId, e.VariantId }, "UQ_CartItem").IsUnique();

            entity.Property(e => e.CartItemId).HasColumnName("cart_item_id");
            entity.Property(e => e.CartId).HasColumnName("cart_id");
            entity.Property(e => e.PriceAtAddition)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price_at_addition");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity)
                .HasDefaultValue(1)
                .HasColumnName("quantity");
            entity.Property(e => e.VariantId).HasColumnName("variant_id");

            entity.HasOne(d => d.Cart).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.CartId)
                .HasConstraintName("FK__CartItem__cart_i__09A971A2");

            entity.HasOne(d => d.Product).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CartItem__produc__0A9D95DB");

            entity.HasOne(d => d.Variant).WithMany(p => p.CartItems)
                .HasForeignKey(d => d.VariantId)
                .HasConstraintName("FK__CartItem__varian__3B0BC30C");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Category__D54EE9B4A435CF3F");

            entity.ToTable("Category");

            entity.HasIndex(e => e.Name, "UQ__Category__72E12F1BDAD43672").IsUnique();

            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.CouponId).HasName("PK__Coupon__58CF6389270E47C9");

            entity.ToTable("Coupon");

            entity.HasIndex(e => e.Code, "UQ__Coupon__357D4CF9446C7847").IsUnique();

            entity.Property(e => e.CouponId).HasColumnName("coupon_id");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("code");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DiscountAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("discount_amount");
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("discount_type");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.MinimumPurchase)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("minimum_purchase");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.UsageCount)
                .HasDefaultValue(0)
                .HasColumnName("usage_count");
            entity.Property(e => e.UsageLimit).HasColumnName("usage_limit");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__CD65CB858DC6304B");

            entity.ToTable("Customer");

            entity.HasIndex(e => e.UserId, "UQ__Customer__B9BE370E2D50CCE7").IsUnique();

            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.LastLogin).HasColumnName("last_login");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.User).WithOne(p => p.Customer)
                .HasForeignKey<Customer>(d => d.UserId)
                .HasConstraintName("FK__Customer__user_i__3F466844");
        });

        modelBuilder.Entity<HelpfulRating>(entity =>
        {
            entity.HasKey(e => e.HelpfulId).HasName("PK__HelpfulR__BF2D9D32B472B7F6");

            entity.ToTable("HelpfulRating");

            entity.HasIndex(e => new { e.RatingId, e.CustomerId }, "UQ_HelpfulRating").IsUnique();

            entity.Property(e => e.HelpfulId).HasColumnName("helpful_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.IsHelpful).HasColumnName("is_helpful");
            entity.Property(e => e.RatingId).HasColumnName("rating_id");

            entity.HasOne(d => d.Customer).WithMany(p => p.HelpfulRatings)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HelpfulRa__custo__498EEC8D");

            entity.HasOne(d => d.Rating).WithMany(p => p.HelpfulRatings)
                .HasForeignKey(d => d.RatingId)
                .HasConstraintName("FK__HelpfulRa__ratin__489AC854");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Order__46596229BE871962");

            entity.ToTable("Order", tb => tb.HasTrigger("after_order_insert"));

            entity.HasIndex(e => e.CustomerId, "idx_order_customer");

            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.AddressId).HasColumnName("address_id");
            entity.Property(e => e.AffiliateCode)
                .HasMaxLength(20)
                .HasColumnName("affiliate_code");
            entity.Property(e => e.AffiliateId).HasColumnName("affiliate_id");
            entity.Property(e => e.CouponId).HasColumnName("coupon_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.DiscountAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("discount_amount");
            entity.Property(e => e.FinalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("final_amount");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("payment_method");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(10)
                .HasDefaultValue("pending")
                .HasColumnName("payment_status");
            entity.Property(e => e.ShippingFee)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("shipping_fee");
            entity.Property(e => e.TaxAmount)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("tax_amount");
            entity.Property(e => e.TotalAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_amount");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Address).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Order__address_i__29221CFB");

            entity.HasOne(d => d.Affiliate).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AffiliateId)
                .HasConstraintName("FK__Order__affiliate__3A179ED3");

            entity.HasOne(d => d.Coupon).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CouponId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK__Order__coupon_id__2A164134");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Order__customer___282DF8C2");
        });

        modelBuilder.Entity<OrderItem>(entity =>
        {
            entity.HasKey(e => e.OrderItemId).HasName("PK__OrderIte__3764B6BC78320CA7");

            entity.ToTable("OrderItem");

            entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");
            entity.Property(e => e.PriceAtPurchase)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price_at_purchase");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.SuborderId).HasColumnName("suborder_id");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("total_price");
            entity.Property(e => e.VariantId).HasColumnName("variant_id");

            entity.HasOne(d => d.Product).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__OrderItem__produ__3493CFA7");

            entity.HasOne(d => d.Suborder).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.SuborderId)
                .HasConstraintName("FK__OrderItem__subor__339FAB6E");

            entity.HasOne(d => d.Variant).WithMany(p => p.OrderItems)
                .HasForeignKey(d => d.VariantId)
                .HasConstraintName("FK__OrderItem__varia__3BFFE745");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Product__47027DF5815589E6");

            entity.ToTable("Product", tb => tb.HasTrigger("update_product_timestamp"));

            entity.HasIndex(e => e.SubcategoryId, "idx_product_category");

            entity.HasIndex(e => new { e.Name, e.IsAvailable, e.ApprovalStatus }, "idx_product_search");

            entity.HasIndex(e => e.SellerId, "idx_product_seller");

            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.ApprovalStatus)
                .HasMaxLength(10)
                .HasDefaultValue("pending")
                .HasColumnName("approval_status");
            entity.Property(e => e.AverageRating)
                .HasDefaultValue(0.0)
                .HasColumnName("average_rating");
            entity.Property(e => e.BasePrice)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("base_price");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasColumnName("description");
            entity.Property(e => e.DiscountPercentage)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discount_percentage");
            entity.Property(e => e.IsAvailable)
                .HasDefaultValue(true)
                .HasColumnName("is_available");
            entity.Property(e => e.MainImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("main_image_url");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("name");
            entity.Property(e => e.SellerId).HasColumnName("seller_id");
            entity.Property(e => e.StockQuantity).HasColumnName("stock_quantity");
            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("updated_at");

            entity.HasOne(d => d.Seller).WithMany(p => p.Products)
                .HasForeignKey(d => d.SellerId)
                .HasConstraintName("FK__Product__seller___6754599E");

            entity.HasOne(d => d.Subcategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.SubcategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Product__subcate__68487DD7");
        });

        modelBuilder.Entity<ProductAttribute>(entity =>
        {
            entity.HasKey(e => e.AttributeId).HasName("PK__ProductA__9090C9BB465EF1FC");

            entity.ToTable("ProductAttribute");

            entity.HasIndex(e => new { e.SubcategoryId, e.Name }, "UQ_ProductAttribute_Name").IsUnique();

            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.IsFilterable)
                .HasDefaultValue(false)
                .HasColumnName("is_filterable");
            entity.Property(e => e.IsRequired)
                .HasDefaultValue(false)
                .HasColumnName("is_required");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.PossibleValues).HasColumnName("possible_values");
            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("type");

            entity.HasOne(d => d.Subcategory).WithMany(p => p.ProductAttributes)
                .HasForeignKey(d => d.SubcategoryId)
                .HasConstraintName("FK__ProductAt__subca__5CD6CB2B");
        });

        modelBuilder.Entity<ProductAttributeValue>(entity =>
        {
            entity.HasKey(e => e.ValueId).HasName("PK__ProductA__0FECE282EDBABF66");

            entity.ToTable("ProductAttributeValue");

            entity.HasIndex(e => new { e.ProductId, e.AttributeId }, "UQ_ProductAttributeValue").IsUnique();

            entity.Property(e => e.ValueId).HasColumnName("value_id");
            entity.Property(e => e.AttributeId).HasColumnName("attribute_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Value)
                .IsRequired()
                .HasColumnName("value");

            entity.HasOne(d => d.Attribute).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.AttributeId)
                .HasConstraintName("FK__ProductAt__attri__70DDC3D8");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductAttributeValues)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__ProductAt__produ__6FE99F9F");
        });

        modelBuilder.Entity<ProductImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__ProductI__DC9AC955099FFEE4");

            entity.ToTable("ProductImage");

            entity.Property(e => e.ImageId).HasColumnName("image_id");
            entity.Property(e => e.DisplayOrder)
                .HasDefaultValue(0)
                .HasColumnName("display_order");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.ProductId).HasColumnName("product_id");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductImages)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__ProductIm__produ__6C190EBB");
        });

        modelBuilder.Entity<ProductRecommendation>(entity =>
        {
            entity.HasKey(e => e.RecommendationId).HasName("PK__ProductR__BCB11F4FC58FA66D");

            entity.ToTable("ProductRecommendation");

            entity.HasIndex(e => new { e.SourceProductId, e.RecommendedProductId, e.RecommendationType }, "UQ_ProductRecommendation").IsUnique();

            entity.HasIndex(e => new { e.SourceProductId, e.Score }, "idx_product_recommendation_source").IsDescending(false, true);

            entity.Property(e => e.RecommendationId).HasColumnName("recommendation_id");
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("last_updated");
            entity.Property(e => e.RecommendationType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("recommendation_type");
            entity.Property(e => e.RecommendedProductId).HasColumnName("recommended_product_id");
            entity.Property(e => e.Score)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("score");
            entity.Property(e => e.SourceProductId).HasColumnName("source_product_id");

            entity.HasOne(d => d.RecommendedProduct).WithMany(p => p.ProductRecommendationRecommendedProducts)
                .HasForeignKey(d => d.RecommendedProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductRe__recom__7A3223E8");

            entity.HasOne(d => d.SourceProduct).WithMany(p => p.ProductRecommendationSourceProducts)
                .HasForeignKey(d => d.SourceProductId)
                .HasConstraintName("FK__ProductRe__sourc__793DFFAF");
        });

        modelBuilder.Entity<ProductVariant>(entity =>
        {
            entity.HasKey(e => e.VariantId).HasName("PK__ProductV__EACC68B786F73616");

            entity.ToTable("ProductVariant");

            entity.HasIndex(e => new { e.ProductId, e.VariantName }, "UQ_ProductVariant").IsUnique();

            entity.Property(e => e.VariantId).HasColumnName("variant_id");
            entity.Property(e => e.DiscountPercentage)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("discount_percentage");
            entity.Property(e => e.IsAvailable)
                .HasDefaultValue(true)
                .HasColumnName("is_available");
            entity.Property(e => e.IsDefault)
                .HasDefaultValue(false)
                .HasColumnName("is_default");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("price");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Sku)
                .HasMaxLength(50)
                .HasColumnName("sku");
            entity.Property(e => e.StockQuantity).HasColumnName("stock_quantity");
            entity.Property(e => e.VariantImageUrl)
                .HasMaxLength(255)
                .HasColumnName("variant_image_url");
            entity.Property(e => e.VariantName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("variant_name");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductVariants)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__ProductVa__produ__1209AD79");
        });

        modelBuilder.Entity<ProductView>(entity =>
        {
            entity.HasKey(e => e.ViewId).HasName("PK__ProductV__B5A34EE26E9EE4D4");

            entity.ToTable("ProductView");

            entity.HasIndex(e => new { e.ProductId, e.ViewedAt }, "idx_product_view_analytics");

            entity.Property(e => e.ViewId).HasColumnName("view_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SessionId)
                .HasMaxLength(255)
                .HasColumnName("session_id");
            entity.Property(e => e.ViewedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("viewed_at");

            entity.HasOne(d => d.Customer).WithMany(p => p.ProductViews)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__ProductVi__custo__531856C7");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductViews)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__ProductVi__produ__5224328E");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Rating__D35B278BEE5FF463");

            entity.ToTable("Rating", tb => tb.HasTrigger("after_rating_insert_update"));

            entity.HasIndex(e => new { e.CustomerId, e.ProductId }, "UQ_Rating").IsUnique();

            entity.HasIndex(e => e.ProductId, "idx_rating_product");

            entity.Property(e => e.RatingId).HasColumnName("rating_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.HelpfulCount)
                .HasDefaultValue(0)
                .HasColumnName("helpful_count");
            entity.Property(e => e.IsVerifiedPurchase)
                .HasDefaultValue(false)
                .HasColumnName("is_verified_purchase");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.Stars).HasColumnName("stars");

            entity.HasOne(d => d.Customer).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Rating__customer__3C34F16F");

            entity.HasOne(d => d.Product).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Rating__product___3D2915A8");
        });

        modelBuilder.Entity<ReturnItem>(entity =>
        {
            entity.HasKey(e => e.ReturnItemId).HasName("PK__ReturnIt__3CFDE9F2B14C39E2");

            entity.ToTable("ReturnItem");

            entity.HasIndex(e => e.OrderItemId, "idx_return_item_order_item");

            entity.HasIndex(e => e.ReturnId, "idx_return_item_return");

            entity.Property(e => e.ReturnItemId).HasColumnName("return_item_id");
            entity.Property(e => e.Condition)
                .HasMaxLength(50)
                .HasColumnName("condition");
            entity.Property(e => e.OrderItemId).HasColumnName("order_item_id");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.RefundAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("refund_amount");
            entity.Property(e => e.ReturnId).HasColumnName("return_id");
            entity.Property(e => e.ReturnReason).HasColumnName("return_reason");

            entity.HasOne(d => d.OrderItem).WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.OrderItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ReturnIte__order__467D75B8");

            entity.HasOne(d => d.Return).WithMany(p => p.ReturnItems)
                .HasForeignKey(d => d.ReturnId)
                .HasConstraintName("FK__ReturnIte__retur__4589517F");
        });

        modelBuilder.Entity<ReturnRequest>(entity =>
        {
            entity.HasKey(e => e.ReturnId).HasName("PK__ReturnRe__35C234735363E238");

            entity.ToTable("ReturnRequest", tb => tb.HasTrigger("after_return_status_change"));

            entity.HasIndex(e => e.CustomerId, "idx_return_request_customer");

            entity.HasIndex(e => e.SuborderId, "idx_return_request_suborder");

            entity.Property(e => e.ReturnId).HasColumnName("return_id");
            entity.Property(e => e.ApprovedAt).HasColumnName("approved_at");
            entity.Property(e => e.Comments).HasColumnName("comments");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.ReceivedAt).HasColumnName("received_at");
            entity.Property(e => e.RefundAmount)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("refund_amount");
            entity.Property(e => e.RefundedAt).HasColumnName("refunded_at");
            entity.Property(e => e.RequestedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("requested_at");
            entity.Property(e => e.ReturnReason)
                .IsRequired()
                .HasColumnName("return_reason");
            entity.Property(e => e.ReturnStatus)
                .HasMaxLength(20)
                .HasDefaultValue("requested")
                .HasColumnName("return_status");
            entity.Property(e => e.SuborderId).HasColumnName("suborder_id");
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(100)
                .HasColumnName("tracking_number");

            entity.HasOne(d => d.Customer).WithMany(p => p.ReturnRequests)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ReturnReq__custo__42ACE4D4");

            entity.HasOne(d => d.Suborder).WithMany(p => p.ReturnRequests)
                .HasForeignKey(d => d.SuborderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ReturnReq__subor__41B8C09B");
        });

        modelBuilder.Entity<ReviewImage>(entity =>
        {
            entity.HasKey(e => e.ReviewImageId).HasName("PK__ReviewIm__7A2756A1863DF667");

            entity.ToTable("ReviewImage");

            entity.Property(e => e.ReviewImageId).HasColumnName("review_image_id");
            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.RatingId).HasColumnName("rating_id");

            entity.HasOne(d => d.Rating).WithMany(p => p.ReviewImages)
                .HasForeignKey(d => d.RatingId)
                .HasConstraintName("FK__ReviewIma__ratin__40058253");
        });

        modelBuilder.Entity<SearchHistory>(entity =>
        {
            entity.HasKey(e => e.SearchId).HasName("PK__SearchHi__B302268D39DEE2D7");

            entity.ToTable("SearchHistory");

            entity.HasIndex(e => new { e.CustomerId, e.SearchTime }, "idx_search_history_customer");

            entity.HasIndex(e => new { e.SessionId, e.SearchTime }, "idx_search_history_session");

            entity.Property(e => e.SearchId).HasColumnName("search_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.Filters).HasColumnName("filters");
            entity.Property(e => e.ResultCount).HasColumnName("result_count");
            entity.Property(e => e.SearchQuery)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("search_query");
            entity.Property(e => e.SearchTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("search_time");
            entity.Property(e => e.SessionId)
                .HasMaxLength(255)
                .HasColumnName("session_id");
            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");

            entity.HasOne(d => d.Category).WithMany(p => p.SearchHistories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__SearchHis__categ__69FBBC1F");

            entity.HasOne(d => d.Customer).WithMany(p => p.SearchHistories)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__SearchHis__custo__690797E6");

            entity.HasOne(d => d.Subcategory).WithMany(p => p.SearchHistories)
                .HasForeignKey(d => d.SubcategoryId)
                .HasConstraintName("FK__SearchHis__subca__6AEFE058");
        });

        modelBuilder.Entity<SearchResultClick>(entity =>
        {
            entity.HasKey(e => e.ClickId).HasName("PK__SearchRe__92D40963B3D85A4D");

            entity.ToTable("SearchResultClick");

            entity.HasIndex(e => new { e.SearchId, e.ClickTime }, "idx_search_result_click");

            entity.Property(e => e.ClickId).HasColumnName("click_id");
            entity.Property(e => e.ClickTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("click_time");
            entity.Property(e => e.PositionInResults).HasColumnName("position_in_results");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SearchId).HasColumnName("search_id");

            entity.HasOne(d => d.Product).WithMany(p => p.SearchResultClicks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SearchRes__produ__6FB49575");

            entity.HasOne(d => d.Search).WithMany(p => p.SearchResultClicks)
                .HasForeignKey(d => d.SearchId)
                .HasConstraintName("FK__SearchRes__searc__6EC0713C");
        });

        modelBuilder.Entity<Seller>(entity =>
        {
            entity.HasKey(e => e.SellerId).HasName("PK__Seller__780A0A97E0F95D3A");

            entity.ToTable("Seller");

            entity.HasIndex(e => e.UserId, "UQ__Seller__B9BE370EFB10D02A").IsUnique();

            entity.Property(e => e.SellerId).HasColumnName("seller_id");
            entity.Property(e => e.BusinessDescription).HasColumnName("business_description");
            entity.Property(e => e.BusinessLogo)
                .HasMaxLength(255)
                .HasColumnName("business_logo");
            entity.Property(e => e.BusinessName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("business_name");
            entity.Property(e => e.IsVerified)
                .HasDefaultValue(false)
                .HasColumnName("is_verified");
            entity.Property(e => e.Rating)
                .HasDefaultValue(0.0)
                .HasColumnName("rating");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.VerifiedAt).HasColumnName("verified_at");

            entity.HasOne(d => d.User).WithOne(p => p.Seller)
                .HasForeignKey<Seller>(d => d.UserId)
                .HasConstraintName("FK__Seller__user_id__44FF419A");
        });

        modelBuilder.Entity<SubCategory>(entity =>
        {
            entity.HasKey(e => e.SubcategoryId).HasName("PK__SubCateg__F7A5CC26A24CE2AF");

            entity.ToTable("SubCategory");

            entity.HasIndex(e => new { e.CategoryId, e.Name }, "UQ_SubCategory_Name").IsUnique();

            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(255)
                .HasColumnName("image_url");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");

            entity.HasOne(d => d.Category).WithMany(p => p.SubCategories)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__SubCatego__categ__5629CD9C");
        });

        modelBuilder.Entity<SubOrder>(entity =>
        {
            entity.HasKey(e => e.SuborderId).HasName("PK__SubOrder__98F809983BDC19EF");

            entity.ToTable("SubOrder", tb => tb.HasTrigger("update_order_timestamp"));

            entity.HasIndex(e => e.Status, "idx_suborder_status");

            entity.Property(e => e.SuborderId).HasColumnName("suborder_id");
            entity.Property(e => e.OrderId).HasColumnName("order_id");
            entity.Property(e => e.SellerId).HasColumnName("seller_id");
            entity.Property(e => e.ShippingProvider)
                .HasMaxLength(100)
                .HasColumnName("shipping_provider");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .HasDefaultValue("pending")
                .HasColumnName("status");
            entity.Property(e => e.StatusUpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("status_updated_at");
            entity.Property(e => e.Subtotal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("subtotal");
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(100)
                .HasColumnName("tracking_number");

            entity.HasOne(d => d.Order).WithMany(p => p.SubOrders)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__SubOrder__order___2FCF1A8A");

            entity.HasOne(d => d.Seller).WithMany(p => p.SubOrders)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SubOrder__seller__30C33EC3");
        });

        modelBuilder.Entity<TrendingProduct>(entity =>
        {
            entity.HasKey(e => e.TrendingId).HasName("PK__Trending__72E81805A1A4AE10");

            entity.ToTable("TrendingProduct");

            entity.HasIndex(e => new { e.ProductId, e.CategoryId, e.SubcategoryId, e.TimePeriod }, "UQ_TrendingProduct").IsUnique();

            entity.HasIndex(e => new { e.CategoryId, e.SubcategoryId, e.TrendScore }, "idx_trending_product").IsDescending(false, false, true);

            entity.Property(e => e.TrendingId).HasColumnName("trending_id");
            entity.Property(e => e.CategoryId).HasColumnName("category_id");
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("last_updated");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SubcategoryId).HasColumnName("subcategory_id");
            entity.Property(e => e.TimePeriod)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("time_period");
            entity.Property(e => e.TrendScore)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("trend_score");

            entity.HasOne(d => d.Category).WithMany(p => p.TrendingProducts)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK__TrendingP__categ__05A3D694");

            entity.HasOne(d => d.Product).WithMany(p => p.TrendingProducts)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK__TrendingP__produ__04AFB25B");

            entity.HasOne(d => d.Subcategory).WithMany(p => p.TrendingProducts)
                .HasForeignKey(d => d.SubcategoryId)
                .HasConstraintName("FK__TrendingP__subca__0697FACD");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__B9BE370FA017CF37");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__AB6E6164A91071BC").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("first_name");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("last_name");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(1000)
                .HasColumnName("password_hash");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(20)
                .HasColumnName("phone_number");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("user_type");
        });

        modelBuilder.Entity<UserCoupon>(entity =>
        {
            entity.HasKey(e => e.UserCouponId).HasName("PK__UserCoup__8AC20A4BB2DD11B8");

            entity.ToTable("UserCoupon");

            entity.HasIndex(e => new { e.CustomerId, e.CouponId }, "UQ_UserCoupon").IsUnique();

            entity.Property(e => e.UserCouponId).HasColumnName("user_coupon_id");
            entity.Property(e => e.AssignedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("assigned_at");
            entity.Property(e => e.CouponId).HasColumnName("coupon_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.IsUsed)
                .HasDefaultValue(false)
                .HasColumnName("is_used");
            entity.Property(e => e.UsedAt).HasColumnName("used_at");

            entity.HasOne(d => d.Coupon).WithMany(p => p.UserCoupons)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK__UserCoupo__coupo__1DB06A4F");

            entity.HasOne(d => d.Customer).WithMany(p => p.UserCoupons)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__UserCoupo__custo__1CBC4616");
        });

        modelBuilder.Entity<UserProductInteraction>(entity =>
        {
            entity.HasKey(e => e.InteractionId).HasName("PK__UserProd__605F8FE69787D63D");

            entity.ToTable("UserProductInteraction");

            entity.HasIndex(e => new { e.CustomerId, e.ProductId, e.InteractionType }, "idx_user_product_interaction");

            entity.HasIndex(e => new { e.SessionId, e.InteractionTime }, "idx_user_product_interaction_session");

            entity.Property(e => e.InteractionId).HasColumnName("interaction_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.DurationSeconds).HasColumnName("duration_seconds");
            entity.Property(e => e.InteractionData).HasColumnName("interaction_data");
            entity.Property(e => e.InteractionTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("interaction_time");
            entity.Property(e => e.InteractionType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("interaction_type");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.SessionId)
                .HasMaxLength(255)
                .HasColumnName("session_id");

            entity.HasOne(d => d.Customer).WithMany(p => p.UserProductInteractions)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__UserProdu__custo__73852659");

            entity.HasOne(d => d.Product).WithMany(p => p.UserProductInteractions)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserProdu__produ__74794A92");
        });

        modelBuilder.Entity<UserRecommendation>(entity =>
        {
            entity.HasKey(e => e.UserRecommendationId).HasName("PK__UserReco__6D15C3082E2D95E1");

            entity.ToTable("UserRecommendation");

            entity.HasIndex(e => new { e.CustomerId, e.ProductId, e.RecommendationType }, "UQ_UserRecommendation").IsUnique();

            entity.HasIndex(e => new { e.CustomerId, e.Score }, "idx_user_recommendation").IsDescending(false, true);

            entity.Property(e => e.UserRecommendationId).HasColumnName("user_recommendation_id");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");
            entity.Property(e => e.LastUpdated)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("last_updated");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.RecommendationType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("recommendation_type");
            entity.Property(e => e.Score)
                .HasColumnType("decimal(10, 4)")
                .HasColumnName("score");

            entity.HasOne(d => d.Customer).WithMany(p => p.UserRecommendations)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__UserRecom__custo__7EF6D905");

            entity.HasOne(d => d.Product).WithMany(p => p.UserRecommendations)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UserRecom__produ__7FEAFD3E");
        });

        modelBuilder.Entity<VariantAttribute>(entity =>
        {
            entity.HasKey(e => e.VariantAttributeId).HasName("PK__VariantA__4B8BB8B0B7ACB019");

            entity.ToTable("VariantAttribute");

            entity.HasIndex(e => new { e.VariantId, e.AttributeName }, "UQ_VariantAttribute").IsUnique();

            entity.Property(e => e.VariantAttributeId).HasColumnName("variant_attribute_id");
            entity.Property(e => e.AttributeName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("attribute_name");
            entity.Property(e => e.AttributeValue)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("attribute_value");
            entity.Property(e => e.VariantId).HasColumnName("variant_id");

            entity.HasOne(d => d.Variant).WithMany(p => p.VariantAttributes)
                .HasForeignKey(d => d.VariantId)
                .HasConstraintName("FK__VariantAt__varia__15DA3E5D");
        });

        modelBuilder.Entity<Wishlist>(entity =>
        {
            entity.HasKey(e => e.WishlistId).HasName("PK__Wishlist__6151514EA2080750");

            entity.ToTable("Wishlist");

            entity.Property(e => e.WishlistId).HasColumnName("wishlist_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("customer_id");

            entity.HasOne(d => d.Customer).WithMany(p => p.Wishlists)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Wishlist__custom__7F2BE32F");
        });

        modelBuilder.Entity<WishlistItem>(entity =>
        {
            entity.HasKey(e => e.WishlistItemId).HasName("PK__Wishlist__190EBE289C4E5EF2");

            entity.ToTable("WishlistItem");

            entity.HasIndex(e => new { e.WishlistId, e.ProductId }, "UQ_WishlistItem").IsUnique();

            entity.Property(e => e.WishlistItemId).HasColumnName("wishlist_item_id");
            entity.Property(e => e.AddedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("added_at");
            entity.Property(e => e.ProductId).HasColumnName("product_id");
            entity.Property(e => e.WishlistId).HasColumnName("wishlist_id");

            entity.HasOne(d => d.Product).WithMany(p => p.WishlistItems)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WishlistI__produ__10566F31");

            entity.HasOne(d => d.Wishlist).WithMany(p => p.WishlistItems)
                .HasForeignKey(d => d.WishlistId)
                .HasConstraintName("FK__WishlistI__wishl__0F624AF8");
        });

    }

}